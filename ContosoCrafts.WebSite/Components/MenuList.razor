@using Microsoft.JSInterop
@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileMenuServices MenuService
@inject JsonFileOrderService OrderService
@inject IJSRuntime JSRuntime


@code {
	ElementReference MyElementReference;
	IEnumerable<ProductCategory> CategoryList = new List<ProductCategory>();
	List<MenuItem> MenuItems = new List<MenuItem>();
	public MenuItem? selectedProduct;

	Dictionary<string, List<MenuItem>> products = new Dictionary<string, List<MenuItem>>();
	List<MenuItem> Sides = new List<MenuItem>();
	List<string> Sizes = new List<string> { "REGULAR (500ml)", "LARGE (700ml) (+$1.00)" };
	List<string> IceLevel = new List<string> { "Normal Ice", "Less Ice", "No Ice", "Hot", "Extra Ice" };
	List<string> SugarLevel = new List<string> { "0% Sweet", "25% sweet", "50% sweet", "75% sweet", "100% sweet", "125% sweet" };

	Boolean NotCustomizable(MenuItem Item)
	{
		return Item.Category == "Merchandise" || Item.Category == "Sides" 
		|| Item.Category == "Dessert" || Item.Category == "Paper Bag/Carrier" || Item.Name == "Tea King Keychain";
	}

	protected override async Task OnInitializedAsync()
	{
		CategoryList = MenuService.GetCategories();
		MenuItems = MenuService.GetMenuItems().ToList();

		foreach (var c in CategoryList)
		{
			if (c.CategoryName != null)
			{
				products.Add(c.CategoryName, new List<MenuItem>());
			}
		}

		foreach (var item in MenuItems)
		{
			string? ItemCategory = item.Category;
			if (ItemCategory != null && products.ContainsKey(ItemCategory))
			{
				products[ItemCategory].Add(item);
				if(ItemCategory == "Sides")
				{
					Sides.Add(item);
				}
			}
		}
	}

	void UpdateProducts()
	{
		CategoryList = MenuService.GetCategories();
		MenuItems = MenuService.GetMenuItems().ToList();

		foreach (var c in CategoryList)
		{
			if (c.CategoryName != null)
			{
				products[c.CategoryName] = new List<MenuItem>();
			}
		}

		foreach (var item in MenuItems)
		{
			string? ItemCategory = item.Category;
			if (ItemCategory != null && products.ContainsKey(ItemCategory))
			{
				products[ItemCategory].Add(item);
			}
		}
	}

	public void SelectProduct(string Product)
	{
		selectedProduct = MenuItems.First(x => x.Name == Product);
		GetCurrentRating();
	}

	int currentRating = 0;
	int voteCount = 0;
	string? voteLabel;

	void GetCurrentRating()
	{
		if (selectedProduct?.Ratings == null)
		{
			currentRating = 0;
			voteCount = 0;
		}
		else
		{
			voteCount = selectedProduct.Ratings.Count();
			voteLabel = voteCount > 1 ? "Votes" : "Vote";
			currentRating = selectedProduct.Ratings.Sum() / voteCount;
		}
		Console.WriteLine($"Current rating for {selectedProduct?.Name}: {currentRating}");
	}

	void SubmitRating(int rating)
	{
		if (selectedProduct == null || selectedProduct.Category == null)
			return;
		System.Console.WriteLine($"Rating received for {selectedProduct?.Name}: {rating}");
		MenuService.AddRating(selectedProduct.Name, rating);

		if (selectedProduct.Ratings == null)
		{
			selectedProduct.Ratings = new int[] { rating };
		}
		else
		{
			var ratings = products[selectedProduct.Category].First(x => x.Name == selectedProduct.Name).Ratings.ToList();
			ratings.Add(rating);
			products[selectedProduct.Category].First(x => x.Name == selectedProduct.Name).Ratings = ratings.ToArray();
		}

		SelectProduct(selectedProduct.Name);
	}

	string SelectedSize;
	string SelectedIceLevel;
	string SelectedSugarLevel;
	List<MenuItem> SelectedSides = new List<MenuItem>();
	public Boolean orderProcessed = false;

	private void UpdateSelectedItems(MenuItem item)
	{
		if (SelectedSides.Contains(item))
		{
			SelectedSides.Remove(item);
		}
		else
		{
			SelectedSides.Add(item);
		}
		Console.WriteLine(SelectedSides.First());
	}


	// add boba user
	private async Task SubmitForm()
	{
		Order? order = new Order();
		order.Item = selectedProduct;
		order.TimeStamp = DateTime.Now.ToString();
		// Non-customiable item
		if (NotCustomizable(selectedProduct))
		{
			order.Sides = SelectedSides.ToArray();
		} else
		{
			order.Sides = SelectedSides.ToArray();
			order.SugarLevel = SelectedSugarLevel;
			order.IceLevel = SelectedIceLevel;
			order.Size = SelectedSize;
		}

		OrderService.ProcessOrder("User Obj", order);

		// reset form
		ResetForm();
		await DisplayOrderFeedback(5000);
	}

	public void ResetForm()
	{
		// reset form
		SelectedIceLevel = "";
		SelectedSize = "";
		SelectedSugarLevel = "";
		SelectedSides.Clear();
	}

	public async Task DisplayOrderFeedback(int milliseconds)
	{
		orderProcessed = true;
		StateHasChanged();
		await Task.Delay(milliseconds);
		orderProcessed = false;
		StateHasChanged();
	}

}

@foreach (var (key, value) in products)
{
	<div class="container-fluid">
		<h1 class="h4 px-3">@key</h1>
		<div class="d-flex p-2 flex-wrap">
			@foreach (var item in products[key])
			{
				<button 
					class="btn-light" 
					data-toggle="modal" 
					data-target="#myModal" 
					@onclick="(e => SelectProduct(item?.Name ?? string.Empty))" 
					style="background: none; border: none; padding: 0"
				>
					<div class="card m-2"
						 style="width: 425px; height: 155px; padding: 20px">
						<div class="d-flex flex-row align-items-center justify-content-between">
							<div class="flex-grow-1 text-start " style="text-align: start">
								<figure class="pr-2">
									<p class="h5 text-start">@item.Name</p>
									<p class="text-muted text-start" style="font-size: 1rem">
										@item.Description
									</p>
									<p class="h6 text-start">@item.Price</p>
								</figure>
							</div>
							@if (@item.Image != null)
							{
								<div>
									<img src="@item.Image"
										 alt="@item.Name"
										 class="rounded float-end"
										 style="width: 75px; height: 75px" />
								</div>
							}
						</div>
					</div>
				</button>
			}
		</div>
	</div>

}

<!-- The Modal -->
<div class="modal" id="myModal">	
		<div class="modal-dialog">
			<div class="modal-content">

			@if (selectedProduct != null)
			{			
				<!-- Modal Header -->
				<div class="modal-header">
					<h4 class="modal-title">@selectedProduct.Name</h4>
					<button type="button" class="close" data-dismiss="modal">&times;</button>
				</div>
				<!-- PRODUCT INFORMATION -->
				<div class="modal-body">
					@if (orderProcessed)
					{
						<div class="alert alert-success z-3" role="alert">
							Your order has been added to the shopping cart!
						</div>
					}
						<div class="d-flex flex-column align-items-center">
							<div class="w-100">
								@if(@selectedProduct.Image != null){
									<img 
										src="@selectedProduct.Image"
										alt="@selectedProduct.Description"
										class="w-100 h-100"
									/>
								}
							</div>
							<div class="d-flex flex-column align-items-left w-100">
								<p style="font-size: 1.5rem; font-weight: 600; line-height: 2;">@selectedProduct.Name</p>
								<p style="font-size: 1rem; line-height: 2;">@selectedProduct.Description</p>
								<p style="font-size: 1rem;  font-weight: 400; line-height: 2;">@selectedProduct.Price</p>
							</div>
						<!-- CUSTOMIZATION FORM body -->
						<form @onsubmit="SubmitForm" class="w-100">
						@if (!@NotCustomizable(selectedProduct))
						{
	
							<div class="d-flex justify-content-start flex-column w-100" >
								<p class="h6 text-start mt-1">Size</p>
									<select class="form-select" aria-label="select size" @bind="SelectedSize" required>
									<option selected>Select one</option>
										@for (int i = 0; i < @Sizes.Count; i++)
									{
											<option value="@Sizes[i]">@Sizes[i]</option>
									}
									</select>
								<p class="h6 text-start mt-1">Ice Level</p>
								<select class="form-select" aria-label="select Ice level" @bind="SelectedIceLevel" required>
											<option selected>Select one</option>
											@for (int i = 0; i < @IceLevel.Count; i++)
											{
											<option value="@IceLevel[i]">@IceLevel[i]</option>
											}
										</select>
								<p class="h6 text-start mt-1">Sugar Level</p>
								<select class="form-select" aria-label="select sugar level" @bind="SelectedSugarLevel" required>
											<option selected>Select one</option>
											@for (int i = 0; i < @SugarLevel.Count; i++)
											{
											<option value="@SugarLevel[i]">@SugarLevel[i]</option>
											}
										</select>
								<p class="h6 text-start mt-1">Toppings</p>
										@foreach (var item in @products["Sides"])
											{
												<div class="form-check">
													<input 
														class="form-check-input" 
														type="checkbox" 
														value="item.Name"
														id="@($"checkbox-{item.Name}")"
														@onchange="(e => UpdateSelectedItems(item))"
													>
													<label 
														class="form-check-label w-100"
														for="@($"checkbox-{item.Name}")">
														<div class="d-flex justify-content-between w-100" >
															<p class="align-self-left">@item.Name</p>
															<p class="align-self-right">@item.Price</p>
														</div>
													</label>
												</div>
											}
								</div>
						}			
								<!-- SUBMIT BUTTON -->
								<div class="d-flex justify-content-start flex-direction-column w-100 py-2">
									<button class="btn btn-primary" type="reset" data-dismiss="modal">X</button>
									<button class="btn btn-primary" type="submit" style="width: 90%">Add to order</button>
								</div>
							</form>
						</div>
					</div>

				<!-- RATINGS FEATURE -->
				<div class="modal-footer">
				@if (voteCount == 0)
				{
					<span>Be the first to vote!</span>
				}
				else
				{
					<span>@voteCount @voteLabel</span>
				}
				@for (int i = 1; i < 6; i++)
				{
					var currentStar = i;
					if (i <= currentRating)
					{
						<span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
					}
					else
					{
						<span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
					}
				}
				<button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
				</div>
			}

			</div>
		</div>
	
</div>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">