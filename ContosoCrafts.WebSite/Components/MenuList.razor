@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileMenuServices MenuService

<h3>MenuList</h3>
@foreach (var (key, value) in products)
{
	<h1>@key</h1>
<div class="container-fluid">
	<div class="d-flex p-2 flex-wrap">
	@foreach(var item in products[key])
	{
		<div 
			class="card m-2" 
			style="width: 425px; height: 155px; padding: 20px"
					 @onclick="(e => SelectProduct(item?.Name ?? string.Empty))"
					 data-toggle="modal" data-target="#productModal"
			>
			<div class="d-flex flex-row align-items-center justify-content-between">
				<div>
					<figure class="text-start">
								<p class="h5">@item.Name</p>
						<p class="text-muted" style="font-size: 1rem">
							@item.Description
						</p>
								<p class="h6">@item.Price</p>
					</figure>
				</div>
				<div>
					<img src="@item.Image"
						 alt="@item.Name"
						 class="rounded float-end" 
						 style="width: 90px; height: 90px"/>
				</div>

			</div>


		</div>
	}
	</div>
</div>
}

<div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered" role="document">
		@if (selectedProduct != null)
		{
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<div class="card">
						<div class="card-img" style="background-image: url('@selectedProduct.Image');">
						</div>
						<div class="card-body">
							<p class="card-text">@selectedProduct.Description</p>
						</div>
					</div>
				</div>
				<div class="modal-footer">
					@if (voteCount == 0)
					{
						<span>Be the first to vote!</span>
					}
					else
					{
						<span>@voteCount @voteLabel</span>
					}
					@for (int i = 1; i < 6; i++)
					{
						var currentStar = i;
						if (i <= currentRating)
						{
							<span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
						}
						else
						{
							<span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
						}
					}
				</div>
			</div>
		}
	</div>
</div>

@code {
	IEnumerable<ProductCategory> CategoryList = new List<ProductCategory>();
	List<MenuItem> MenuItems = new List<MenuItem>();


	Dictionary<string, List<MenuItem>> products = new Dictionary<string, List<MenuItem>>();

	protected override async Task OnInitializedAsync()
	{
		CategoryList = MenuService.GetCategories();
		MenuItems = MenuService.GetMenuItems().ToList();

		foreach(var c in CategoryList)
		{
			products.Add(c.CategoryName, new List<MenuItem>());
		}

		foreach(var item in MenuItems)
		{
			string ItemCategory = item.Category;
			if (products.ContainsKey(ItemCategory))
			{
				products[ItemCategory].Add(item);
			}
		}
	}

	MenuItem? selectedProduct;
	string? selectedProductId;

	void SelectProduct(string productId)
	{
		selectedProductId = productId;
		selectedProduct = MenuItems.First(x => x.Name == productId);
		GetCurrentRating();
	}

	int currentRating = 0;
	int voteCount = 0;
	string? voteLabel;

	void GetCurrentRating()
	{
		if (selectedProduct?.Ratings == null)
		{
			currentRating = 0;
			voteCount = 0;
		}
		else
		{
			voteCount = selectedProduct.Ratings.Count();
			voteLabel = voteCount > 1 ? "Votes" : "Vote";
			currentRating = selectedProduct.Ratings.Sum() / voteCount;
		}

		System.Console.WriteLine($"Current rating for {selectedProduct?.Name}: {currentRating}");
	}

	void SubmitRating(int rating)
	{
		System.Console.WriteLine($"Rating received for {selectedProduct?.Name}: {rating}");
		if (selectedProductId == null)
			return;
		ProductService.AddRating(selectedProductId, rating);
		SelectProduct(selectedProductId);
	}
}
