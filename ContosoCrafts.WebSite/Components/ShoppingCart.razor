
@using Microsoft.AspNetCore.Components.Web
@using ContosoCrafts.WebSite.Services
@using ContosoCrafts.WebSite.Models
@inject JsonFileOrderService OrderService

<div class="container mt-5">
    <h2 class="text-center mb-4">Your cart</h2>
    @if (cartOrders.Count == 0)
    {
        <div class="text-center">
            <h3>Your cart is empty</h3>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-8">
                <h4>Your Order (@TotalItems items)</h4>
                @foreach (var order in cartOrders)
                {
                    <div class="card mb-3">
                        <div class="row no-gutters">
                            <div class="col-md-4">
                                <img src="@order.Item.Image" class="card-img" alt="@order.Item.Name">
                            </div>
                            <div class="col-md-8">
                                <div class="card-body">
                                    <h5 class="card-title">@order.Item.Name</h5>
                                    <p class="card-text">@order.Item.Price</p>
                                    <p class="card-text">Size: @order.Size</p>
                                    <p class="card-text">Ice Level: @order.IceLevel</p>
                                    <p class="card-text">Sugar Level: @order.SugarLevel</p>
                                    <div class="input-group mb-3">
                                        <div class="input-group-prepend">
                                            <button class="btn btn-outline-secondary" type="button" @onclick="() => DecreaseQuantity(order)">-</button>
                                        </div>
                                        <input type="text" class="form-control text-center" value="@order.Quantity" readonly>
                                        <div class="input-group-append">
                                            <button class="btn btn-outline-secondary" type="button" @onclick="() => IncreaseQuantity(order)">+</button>
                                        </div>
                                    </div>
                                    <button class="btn btn-danger" @onclick="() => RemoveOrder(order)">Remove</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="col-md-4">
                <h4>How to Get It</h4>
                <div class="alert alert-info">
                    <strong>Please note, your order will be ready on our next business day: Tomorrow at 12:00 PM.</strong>
                </div>
                <p>Pickup: 1600 Dexter Avenue North 202</p>
                <p>Tomorrow at 12:00 PM</p>
                <h4>Add a Tip</h4>
                <div type="button" class="btn-group" role="group">
                    <button class="btn btn-outline-secondary" @onclick="() => SetTip(15)">15% $@TipAmount(15)</button>
                    <button type="button" class="btn btn-outline-secondary" @onclick="() => SetTip(20)">20% $@TipAmount(20)</button>
                    <button type="button" class="btn btn-outline-secondary" @onclick="() => SetTip(25)">25% $@TipAmount(25)</button>
                    <button type="button" class="btn btn-outline-secondary">Other</button>
                </div>
                <h4 class="mt-4">Order Summary</h4>
                <p>Subtotal: $@Subtotal</p>
                <p>Estimated taxes: $@Taxes</p>
                <p>Tip: $@Tip</p>
                <h5>Total: $@Total</h5>
                <button class="btn btn-primary btn-block mt-3" @onclick="ProcessOrder">Proceed to Checkout</button>
            </div>
        </div>
    }
</div>

@code {
    private int TotalItems => cartOrders.Sum(o => o.Quantity);
    private List<Order> cartOrders = new List<Order>();
    private decimal Tip { get; set; } = 0;

    protected override void OnInitialized()
    {
        cartOrders = OrderService.GetAllOrders().ToList();
    }

    private void IncreaseQuantity(Order order)
    {
        order.Quantity++;
        OrderService.ProcessOrder("defaultUser", order);
        StateHasChanged(); // Ensure the state is updated
    }

    private void DecreaseQuantity(Order order)
    {
        if (order.Quantity > 1)
        {
            order.Quantity--;

            StateHasChanged(); // Ensure the state is updated
        }
    }

    private void RemoveOrder(Order order)
    {
        cartOrders.Remove(order);
        StateHasChanged(); // Ensure the state is updated
    }

    private void SetTip(int percentage)
    {
        Tip = Subtotal * percentage / 100;
        StateHasChanged(); // Ensure the state is updated
    }

    private decimal Subtotal => cartOrders.Sum(o => decimal.Parse(o.Item.Price.Replace("$", "")) * o.Quantity);
    private decimal Taxes => Subtotal * 0.1m; // Example tax calculation
    private decimal Total => Subtotal + Taxes + Tip;

    private decimal TipAmount(int percentage)
    {
        return Subtotal * percentage / 100;
    }

    private void ProcessOrder()
    {
        // Process the final order checkout logic
        // For example, navigate to a checkout page or display a confirmation message
    }
}
